loki:
    image:
      registry: docker.io
      repository: grafana/loki
      tag: 3.5.0
      pullPolicy: IfNotPresent
    schemaConfig:
      configs:
        - from: "2024-04-01"
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    storage_config:
      aws:
        region: eu-central-1 # for example, eu-west-2  
        bucketnames: bellatrix-loki-chunk # Your actual S3 bucket name, for example, loki-aws-dev-chunks
        s3forcepathstyle: false
    ingester:
        chunk_encoding: snappy
    pattern_ingester:
        enabled: true
    limits_config:
      allow_structured_metadata: true
      volume_enabled: true
      retention_period: 672h # 28 days retention
    commonConfig:
      path_prefix: /var/loki
      replication_factor: 1
      compactor_address: '{{ include "loki.compactorAddress" . }}'
    compactor:
      retention_enabled: true 
      delete_request_store: s3
    ruler:
      enable_api: true
      storage:
        type: s3
        s3:
          region: eu-central-1 # for example, eu-west-2
          bucketnames: bellatrix-loki-ruler # Your actual S3 bucket name, for example, loki-aws-dev-ruler
          s3forcepathstyle: false
        alertmanager_url: http://prom:9093 # The URL of the Alertmanager to send alerts (Prometheus, Mimir, etc.)

    querier:
        max_concurrent: 4

    storage:
        type: s3
        bucketNames:
          chunks: "bellatrix-loki-chunk" # Your actual S3 bucket name (loki-aws-dev-chunks)
          ruler: "bellatrix-loki-ruler" # Your actual S3 bucket name (loki-aws-dev-ruler)
          # admin: "<Insert s3 bucket name>" # Your actual S3 bucket name (loki-aws-dev-admin) - GEL customers only
        s3:
          region: eu-central-1 # eu-west-2
          #insecure: false
        # s3forcepathstyle: false  

    memcached:
      chunk_cache:
        enabled: true
        host: loki-chunks-cache #chunk-cache-memcached.loki.svc
        service: memcached-client
        batch_size: 256
        parallelism: 10
      results_cache:
        enabled: true
        host: loki-results-cache #results-cache-memcached.loki.svc
        service: memcached-client
        default_validity: 12h

serviceAccount:
 create: true
 annotations:
   "eks.amazonaws.com/role-arn": "arn:aws:iam::547580490325:role/LokiServiceAccountRole" # The service role you created

deploymentMode: Distributed

#ingester
ingester:
 image:
    registry: docker.io
    repository: grafana/loki
    tag: 3.5.0
    pullPolicy: IfNotPresent
 terminationGracePeriodSeconds: 300
 replicas: 2 #3
 maxUnavailable: 1 
 zoneAwareReplication:
  enabled: false
  maxUnavailablePct: 33 # -- The percent of replicas in each zone that will be restarted at once. In a value of 0-100

#querier
querier:
 image:
    registry: docker.io
    repository: grafana/loki
    tag: 3.5.0
    pullPolicy: IfNotPresent
 replicas: 1 #3
 maxUnavailable: 2

#queryFrontend
queryFrontend:
 image:
    registry: docker.io
    repository: grafana/loki
    tag: 3.5.0
    pullPolicy: IfNotPresent
 replicas: 1 #2
 maxUnavailable: 1

#queryScheduler
queryScheduler:
 image:
    registry: docker.io
    repository: grafana/loki
    tag: 3.5.0
    pullPolicy: IfNotPresent
 replicas: 1 #2

#distributor
distributor:
 image:
    registry: docker.io
    repository: grafana/loki
    tag: 3.5.0
    pullPolicy: IfNotPresent
 replicas: 1 #3
 maxUnavailable: 2

#compactor
compactor:
 image:
    registry: docker.io
    repository: grafana/loki
    tag: 3.5.0
    pullPolicy: IfNotPresent
 replicas: 1

#indexGateway
indexGateway:
 image:
    registry: docker.io
    repository: grafana/loki
    tag: 3.5.0
    pullPolicy: IfNotPresent
 replicas: 1
 maxUnavailable: 1

#ruler
ruler:
 replicas: 1
 maxUnavailable: 1
 image:
    registry: docker.io
    repository: grafana/loki
    tag: 3.5.0
    pullPolicy: IfNotPresent


# This exposes the Loki gateway so it can be written to and queried externaly
gateway:
 enabled: true
 image:
    registry: docker.io
    repository: nginxinc/nginx-unprivileged
    tag: 1.28-alpine
    pullPolicy: IfNotPresent
 service:
   type: NodePort
 basicAuth: 
     enabled: true
     existingSecret: loki-basic-auth

# Since we are using basic auth, we need to pass the username and password to the canary
lokiCanary:
  enabled: true
  # -- If true, the canary will send directly to Loki via the address configured for verification --
  # -- If false, it will write to stdout and an Agent will be needed to scrape and send the logs --
  push: true
  image:
    registry: docker.io
    repository: grafana/loki-canary
    tag: 3.5.0
    pullPolicy: IfNotPresent
  extraArgs:
    - -pass=$(LOKI_PASS)
    - -user=$(LOKI_USER)
  extraEnv:
    - name: LOKI_PASS
      valueFrom:
        secretKeyRef:
          name: canary-basic-auth
          key: password
    - name: LOKI_USER
      valueFrom:
        secretKeyRef:
          name: canary-basic-auth
          key: username

# Enable minio for storage
minio:
 enabled: false

backend:
 replicas: 0
read:
 replicas: 0
write:
 replicas: 0

singleBinary:
 replicas: 0

resultsCache:
  enabled: true
  image:
    repository: memcached
    tag: 1.6.38-alpine
    pullPolicy: IfNotPresent
  defaultValidity: 12h
  timeout: 500ms
  replicas: 1
  podDisruptionBudget:
    maxUnavailable: 1
  # -- Port of the results-cache service
  port: 11211
  # -- Amount of memory allocated to results-cache for object storage (in MB).
  allocatedMemory: 512 #1024
  # -- Maximum item results-cache for memcached (in MB).
  maxItemMemory: 5
  # -- Maximum number of connections allowed
  connectionLimit: 16384
  # -- Max memory to use for cache write back
  writebackSizeLimit: 500MB
  # -- Max number of objects to use for cache write back
  writebackBuffer: 500000
  # -- Number of parallel threads for cache write back
  writebackParallelism: 1

chunksCache:
  enabled: true
  image:
    repository: memcached
    tag: 1.6.38-alpine
    pullPolicy: IfNotPresent
  batchSize: 4
  parallelism: 5
  timeout: 2000ms
  defaultValidity: 0s
  # -- Total number of chunks-cache replicas
  replicas: 1
  # -- Port of the chunks-cache service
  port: 11211
  # -- Amount of memory allocated to chunks-cache for object storage (in MB).
  allocatedMemory: 512 #8192  # resources limit & request of memcached object is calculated using allocatedMemory * 1.2
  # -- Maximum item memory for chunks-cache (in MB).
  maxItemMemory: 5
  # -- Maximum number of connections allowed
  connectionLimit: 16384
  # -- Max memory to use for cache write back
  writebackSizeLimit: 500MB
  # -- Max number of objects to use for cache write back
  writebackBuffer: 500000
  # -- Number of parallel threads for cache write back
  writebackParallelism: 1

memcached:
  image:
    repository: memcached
    tag: 1.6.38-alpine
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: 500m
      memory: 512Mi #9830Mi
    limits:
      memory: 1024Mi #9830Mi
  # -- The SecurityContext override for memcached pods
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 11211
    runAsGroup: 11211
    fsGroup: 11211
  # -- The name of the PriorityClass for memcached pods
  priorityClassName: null
  # -- The SecurityContext for memcached containers
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop: [ALL]
    allowPrivilegeEscalation: false

memcachedExporter:
  # -- Whether memcached metrics should be exported
  enabled: true
  image:
    repository: prom/memcached-exporter
    tag: v0.15.2
    pullPolicy: IfNotPresent
  # resources:
  #   requests: {}
  #   limits: {}
  resources:
    requests:
      cpu: 500m
      memory: 512Mi #9830Mi
    limits:
      memory: 1024Mi
  # -- The SecurityContext for memcached exporter containers
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop: [ALL]
    allowPrivilegeEscalation: false
  # -- Extra args to add to the exporter container.
  # Example:
  # extraArgs:
  #   memcached.tls.enable: true
  #   memcached.tls.cert-file: /certs/cert.crt
  #   memcached.tls.key-file: /certs/cert.key
  #   memcached.tls.ca-file: /certs/ca.crt
  #   memcached.tls.insecure-skip-verify: false
  #   memcached.tls.server-name: memcached
  extraArgs: {}

# Configuration for the memberlist service
memberlist:
  service:
    publishNotReadyAddresses: false


# helm upgrade --install loki grafana/loki -n loki --create-namespace --values "/Users/opstree/Documents/github.io/prometheus-grafana/loki/loki-override-values.yaml"